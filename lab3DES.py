# Початкова перестановка (IP)
IP = [58, 50, 42, 34, 26, 18, 10, 2,
      60, 52, 44, 36, 28, 20, 12, 4,
      62, 54, 46, 38, 30, 22, 14, 6,
      64, 56, 48, 40, 32, 24, 16, 8,
      57, 49, 41, 33, 25, 17, 9, 1,
      59, 51, 43, 35, 27, 19, 11, 3,
      61, 53, 45, 37, 29, 21, 13, 5,
      63, 55, 47, 39, 31, 23, 15, 7]

# Кінцева перестановка (IP^-1)
IP_INV = [40, 8, 48, 16, 56, 24, 64, 32,
          39, 7, 47, 15, 55, 23, 63, 31,
          38, 6, 46, 14, 54, 22, 62, 30,
          37, 5, 45, 13, 53, 21, 61, 29,
          36, 4, 44, 12, 52, 20, 60, 28,
          35, 3, 43, 11, 51, 19, 59, 27,
          34, 2, 42, 10, 50, 18, 58, 26,
          33, 1, 41, 9, 49, 17, 57, 25]

# Перестановка розширення (E)
E = [32, 1, 2, 3, 4, 5, 4, 5,
     6, 7, 8, 9, 8, 9, 10, 11,
     12, 13, 12, 13, 14, 15, 16, 17,
     16, 17, 18, 19, 20, 21, 20, 21,
     22, 23, 24, 25, 24, 25, 26, 27,
     28, 29, 28, 29, 30, 31, 32, 1]

# Функція перестановки (P)
P = [16, 7, 20, 21, 29, 12, 28, 17,
     1, 15, 23, 26, 5, 18, 31, 10,
     2, 8, 24, 14, 32, 27, 3, 9,
     19, 13, 30, 6, 22, 11, 4, 25]

# S-блоки (S1 до S8)
S_BOXES = [
    # S1
    [[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
     [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
     [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
     [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]],
    # S2
    [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
     [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
     [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
     [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]],
    # S3
    [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
     [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
     [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
     [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]],
    # S4
    [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
     [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
     [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
     [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]],
    # S5
    [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
     [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
     [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
     [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]],
    # S6
    [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
     [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
     [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
     [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]],
    # S7
    [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
     [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
     [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
     [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]],
    # S8
    [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
     [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
     [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
     [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]]
]

# Початкова перестановка для ключа (PC-1)
PC1 = [57, 49, 41, 33, 25, 17, 9,
       1, 58, 50, 42, 34, 26, 18,
       10, 2, 59, 51, 43, 35, 27,
       19, 11, 3, 60, 52, 44, 36,
       63, 55, 47, 39, 31, 23, 15,
       7, 62, 54, 46, 38, 30, 22,
       14, 6, 61, 53, 45, 37, 29,
       21, 13, 5, 28, 20, 12, 4]

# Друга перестановка для ключа (PC-2)
PC2 = [14, 17, 11, 24, 1, 5,
       3, 28, 15, 6, 21, 10,
       23, 19, 12, 4, 26, 8,
       16, 7, 27, 20, 13, 2,
       41, 52, 31, 37, 47, 55,
       30, 40, 51, 45, 33, 48,
       44, 49, 39, 56, 34, 53,
       46, 42, 50, 36, 29, 32]

# Кількість зсувів для кожного раунду
SHIFT_SCHEDULE = [1, 1, 2, 2, 2, 2, 2, 2,
                  1, 2, 2, 2, 2, 2, 2, 1]

def permute(block, table):
    return [block[i - 1] for i in table]

def shift_left(block, shifts):
    return block[shifts:] + block[:shifts]

def generate_keys(key):
    key_bin = [int(b) for b in format(key, '064b')]

    # Початкова перестановка ключа (PC-1)
    key_56bit = permute(key_bin, PC1)

    # Розділяємо ключ на ліву та праву частини (по 28 бітів)
    C, D = key_56bit[:28], key_56bit[28:]

    # Генеруємо 16 підключів
    round_keys = []
    for shift in SHIFT_SCHEDULE:
        # Виконуємо зсуви вліво
        C = shift_left(C, shift)
        D = shift_left(D, shift)

        # З'єднуємо C і D та застосовуємо PC-2, щоб отримати 48-бітний підключ
        CD = C + D
        round_key = permute(CD, PC2)
        round_keys.append(round_key)

    return round_keys

# Приклад використання
key = 0x133457799BBCDFF1  # 64-бітний ключ
round_keys = generate_keys(key)

# Вивід згенерованих ключів (в двійковому вигляді)
for i, rk in enumerate(round_keys):
    print(f"Round {i + 1} key: {''.join(map(str, rk))}")


def apply_sbox(input_bits, sbox):
    row = (input_bits[0] << 1) + input_bits[5]  # Використовуємо перший і останній біти для рядка
    col = (input_bits[1] << 3) + (input_bits[2] << 2) + (input_bits[3] << 1) + input_bits[
        4]  # Середні 4 біти для стовпця
    return format(sbox[row][col], '04b')  # Повертає результат як 4-бітний рядок


def f(right, key):
    # Розширення 32-бітної половини до 48 бітів
    expanded_right = permute(right, E)
    # XOR з ключем
    xor_result = [int(expanded_right[i]) ^ key[i] for i in range(48)]

    # Розділяємо на 8 блоків по 6 біт і застосовуємо S-блоки
    sbox_output = ""
    for i in range(8):
        sbox_bits = xor_result[i * 6:(i + 1) * 6]
        sbox_value = apply_sbox(sbox_bits, S_BOXES[i])
        sbox_output += sbox_value

    # Перетворення результату S-блоків за допомогою перестановки P
    return permute([int(b) for b in sbox_output], P)


def des_encrypt(plaintext, key):
    # Початкова перестановка
    plaintext_bin = [int(b) for b in format(plaintext, '064b')]
    permuted_text = permute(plaintext_bin, IP)

    # Розділяємо текст на ліву та праву половини
    left, right = permuted_text[:32], permuted_text[32:]

    # Генеруємо 16 ключів для кожного раунду
    round_keys = generate_keys(key)

    # 16 раундів DES
    for round_key in round_keys:
        new_right = f(right, round_key)
        new_right = [new_right[i] ^ left[i] for i in range(32)]  # XOR результату f із лівою половиною
        left, right = right, new_right  # Змінюємо місцями ліву та праву половини

    # Остаточна перестановка після об'єднання правої та лівої половини
    final_text = permute(right + left, IP_INV)

    # Повертає зашифрований текст як ціле число
    return int("".join(map(str, final_text)), 2)


plaintext = 0x0123456789ABCDEF  # 64-бітний відкритий текст
key = 0x133457799BBCDFF1  # 64-бітний ключ
ciphertext = des_encrypt(plaintext, key)
print(f"Plaintext: {hex(plaintext)}")
print(f"Key: {hex(key)}")
print(f"Encrypted text: {hex(ciphertext)}")

# Перетворюємо шістнадцяткове значення на байти
ciphertext_bytes = ciphertext.to_bytes((ciphertext.bit_length() + 7) // 8, byteorder='big')

import base64
# Закодовуємо байти у формат Base64
ciphertext_base64 = base64.b64encode(ciphertext_bytes).decode('utf-8')

print(f"Encrypted text in Base64: {ciphertext_base64}")